[data_model_wrangler_dm_index_sourcetype_field]
action.email.show_password = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 6,14 * * *
dispatch.earliest_time = -4h@h
dispatch.latest_time = -3h@h
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = data_model_wrangler
request.ui_dispatch_view = search
search = | datamodelsimple \
| search datamodel!="*_Validation" \
| search datamodel!="internal_audit_logs" \
| search datamodel!="internal_server" \
| search datamodel IN (`datamodel_wrangler_data_model_list`) \
| map maxsearches=1000 search="\
  | datamodel \"$datamodel$\" \
  | spath output=modelName modelName \
  | spath path=objects{}.fields{} output=y \
  | search y=* \
  | mvexpand y \
  | spath input=y \
  | rename displayName as fieldDisplayName\
  | spath path=objects{}.calculations{}.outputFields{} output=z\
  | search z=* \
  | mvexpand z \
  | spath input=z\
  | rename displayName as calcFieldDisplayName\
  | eval fieldName=coalesce(fieldName, calcFieldDisplayName)\
  | dedup fieldName \
  | mvexpand fieldName\
  | dedup fieldName\
  | spath path=objects{} output=x\
  | search x=* \
  | mvexpand x\
  | spath input=x  \
  | search parentName!="BaseSearch"\
  | eval object_name=lineage  \
  | rex field=lineage \"^(?<object_name>\w+)\.\"\
  | search NOT fieldName  IN (\"_time\", \"host\", \"source\", \"sourcetype\", \"tag\")\
| stats count by modelName object_name fieldName \
| sort fieldName \
| eval fieldName=\"values(\".object_name.\".\".fieldName.\") as \".fieldName " \
| stats values(fieldName) as DMfieldNames\
    by modelName \
| map maxsearches=1000 search="| tstats count from datamodel=\"$modelName$\" by sourcetype,index | eval modelName=\"$modelName$\" | eval DMfieldNames=\"$DMfieldNames$\" " \
| stats delim="," \
    values(DMfieldNames) as DMfieldNames\
    values(count) as count\
    by index sourcetype modelName \
| table modelName index sourcetype DMfieldNames count \
| mvcombine delim=" " DMfieldNames \
| nomv DMfieldNames \
| map maxsearches=1000 search="| tstats `non_quoted_string(\"$DMfieldNames$\")`\
                                   FROM datamodel=\"$modelName$\"\
                                      WHERE index=\"$index$\" sourcetype=\"$sourcetype$\" \
                                     BY sourcetype,index\
                              | stats values(*) AS * \
                              | transpose \
                              | rename column as field\
                              | table field                              \
                              | eval index=\"$index$\"\
                                  | eval sourcetype=\"$sourcetype$\"\
                                  | eval modelName=\"$modelName$\"\
                                  | eval count=\"$count$\"\
                                  | stats values(count) as count\
                                      by modelName, index, field, sourcetype" \
| eval _time=now() \
| bin _time span=1h \
| eval ReportType="data_model_wrangler_dm_index_sourcetype_field_v1" \
| table _time modelName index sourcetype field count ReportType\
| collect index=`data_model_wrangler_index`

[data_model_wrangler_field_quality]
action.email.show_password = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
dispatch.earliest_time = -1d@d
dispatch.latest_time = @d
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = data_model_wrangler
request.ui_dispatch_view = search
search = `data_model_wrangler_dm_index_sourcetype_field_search` \
| rename orig_index as index \
| rename orig_sourcetype as sourcetype \
| bin _time span=1d \
| stats latest(count) as event_count\
    by _time modelName, index, field, sourcetype \
| lookup datamodel_recommended_fields.csv datamodel as modelName OUTPUT recommended_field \
| eventstats dc(recommended_field) as recommended_field_count by modelName \
| eventstats dc(field) as field_count by index, sourcetype \
| eventstats values(recommended_field) as recommended_fields by modelName \
| stats \
    values(recommended_fields) as recommended_fields\
    values(field) as fields\
    values(field_count) as field_count\
    values(recommended_field_count) as recommended_field_count\
    latest(event_count) as event_count\
    by _time, modelName, index, sourcetype \
| mvexpand recommended_fields \
| mvexpand fields \
| eval match=case(recommended_fields==fields, 1, 1=1, 0) \
| stats\
    values(recommended_fields) as splunk_recommended_fields\
    values(fields) as actual_mapped_fields\
    values(field_count) as field_count\
    sum(match) as match_count\
    values(recommended_field_count) as recommended_field_count\
    latest(event_count) as event_count\
    by _time, modelName, index, sourcetype \
| join type=left time, modelName, index, sourcetype \
    [ search `data_model_wrangler_dm_index_sourcetype_field_search` \
    | rename orig_index as index \
    | rename orig_sourcetype as sourcetype \
    | bin _time span=1d \
    | stats latest(count) as count\
        by _time modelName, index, field, sourcetype \
    | lookup datamodel_recommended_fields.csv datamodel as modelName OUTPUT recommended_field \
    | eventstats dc(recommended_field) as recommended_field_count by modelName \
    | eventstats dc(field) as field_count by index, sourcetype \
    | eventstats values(recommended_field) as recommended_fields by modelName \
    | stats \
        values(recommended_fields) as recommended_fields\
        values(field) as fields\
        values(field_count) as field_count\
        values(recommended_field_count) as recommended_field_count\
        by _time, modelName, index, sourcetype \
    | mvexpand recommended_fields \
    | mvexpand fields \
    | eval match=case(recommended_fields==fields, 1, 1=1, 0) \
    | eventstats\
        values(fields) as actual_mapped_fields\
        values(field_count) as field_count\
        values(match) as match\
        sum(match) as match_count\
        values(recommended_field_count) as recommended_field_count\
        by _time, modelName, index, sourcetype, recommended_fields \
    | where match=0 \
    | stats values(recommended_fields) as missing_rec_fields\
        by _time, modelName, index, sourcetype ] \
| eval rec_field_coverage_pct=round((match_count/recommended_field_count)*100, 2) \
| makemv missing_rec_fields \
| join modelName type=left \
    [| datamodel \
    | spath output=modelName modelName \
    | spath path=objects{}.constraints{} output=y \
    | search y=* \
    | mvexpand y \
    | spath input=y \
    | table y \
    | search y="*cim_*_indexes*" \
    | rex field=y "cim_(?<modelName>\w+)_indexes\`\)\s(?<constraint_srch>.*)\"," \
    | stats count by modelName constraint_srch \
    | table modelName constraint_srch ] \
| eval cim_search="index=".index." sourcetype=".sourcetype." ".constraint_srch \
| table _time modelName index sourcetype cim_search actual_mapped_fields missing_rec_fields rec_field_coverage_pct event_count \
| sort -rec_field_coverage_pct modelName index sourcetype \
| eval datetime=_time \
| map maxsearches=1000 search="| datamodel \"$modelName$\" \
                               | rex max_match=999 \"fieldName\\\":\\\"(?<field>[^\\\"]+)\" \
                               | stats values(field) as field \
                               | mvexpand field \
                               | where NOT match(field, \"_time|host|sourcetype|source|[A-Z]+|_bunit|_category|_priority|_requires_av|_should_update\") OR match(field, \"object_category\") \
                               | join type=outer field \
                                   [ search `non_quoted_string(\"$cim_search$\")`\
                                   | head 10000 \
                                   | fieldsummary maxvals=15 \
                                   | eventstats max(count) AS total \
                                   | eval percent_coverage=round(count/total*100, 2) \
                                   | table field, percent_coverage, distinct_count, total, values] \
                               | spath input=values \
                               | rename {}.value AS sample_values {}.count AS sample_count distinct_count AS distinct_value_count total AS total_events \
                               | fillnull value=0 percent_coverage, distinct_value_count, total_events \
                               | mvmath field=sample_count field2=total_events \
                               | eval field_values=mvzip(mvmath_result, sample_values, \" \") \
                               | lookup cim_validation_regex field \
                               | mvrex showcount=t showunmatched=t field=sample_values validation_regex \
                               | eval modelName=\"$modelName$\"\
                                       | eval index=\"$index$\"\
                                       | eval sourcetype=\"$sourcetype$\"\
                                       | eval event_count=\"$event_count$\"\
                                   | eval _time=\"$datetime$\"                                                              \
                               | table _time, modelName, index, sourcetype, field, total_events, distinct_value_count, percent_coverage, event_count" \
| stats\
    values(total_events) as total_events\
    values(distinct_value_count) as distinct_value_count\
    values(percent_coverage) as percent_coverage\
    latest(event_count) as event_count\
    by _time modelName, index, sourcetype, field \
| eval ReportType="data_model_wrangler_field_quality_v1" \
| collect index=`data_model_wrangler_index`

[data_model_wrangler_mapping_quality]
action.email.show_password = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
dispatch.earliest_time = -1d@d
dispatch.latest_time = @d
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = data_model_wrangler
request.ui_dispatch_view = search
search = `data_model_wrangler_dm_index_sourcetype_field_search` \
| rename orig_index as index \
| rename orig_sourcetype as sourcetype \
| bin _time span=1d \
| stats latest(count) as count\
    by _time modelName, index, field, sourcetype \
| lookup datamodel_recommended_fields.csv datamodel as modelName OUTPUT recommended_field \
| eventstats dc(recommended_field) as recommended_field_count by modelName \
| eventstats dc(field) as field_count by index, sourcetype \
| eventstats values(recommended_field) as recommended_fields by modelName \
| stats \
    values(recommended_fields) as recommended_fields\
    values(field) as fields\
    values(field_count) as field_count\
    values(recommended_field_count) as recommended_field_count\
    by _time, modelName, index, sourcetype \
| mvexpand recommended_fields \
| mvexpand fields \
| eval match=case(recommended_fields==fields, 1, 1=1, 0) \
| stats\
    values(recommended_fields) as splunk_recommended_fields\
    values(fields) as actual_mapped_fields\
    values(field_count) as field_count\
    sum(match) as match_count\
    values(recommended_field_count) as recommended_field_count\
    by _time, modelName, index, sourcetype \
| join type=left modelName, index, sourcetype \
    [ search `data_model_wrangler_dm_index_sourcetype_field_search`  \
    | rename orig_index as index \
    | rename orig_sourcetype as sourcetype \
    | bin _time span=1d \
    | stats latest(count) as count\
        by _time, modelName, index, field, sourcetype \
    | search modelName="*" \
    | search index="*" \
    | search sourcetype="*" \
    | lookup datamodel_recommended_fields.csv datamodel as modelName OUTPUT recommended_field \
    | eventstats dc(recommended_field) as recommended_field_count by modelName \
    | eventstats dc(field) as field_count by index, sourcetype \
    | eventstats values(recommended_field) as recommended_fields by modelName \
    | stats \
        values(recommended_fields) as recommended_fields\
        values(field) as fields\
        values(field_count) as field_count\
        values(recommended_field_count) as recommended_field_count\
        by _time, modelName, index, sourcetype \
    | mvexpand recommended_fields \
    | mvexpand fields \
    | eval match=case(recommended_fields==fields, 1, 1=1, 0) \
    | eventstats\
        values(fields) as actual_mapped_fields\
        values(field_count) as field_count\
        values(match) as match\
        sum(match) as match_count\
        values(recommended_field_count) as recommended_field_count\
        by _time, modelName, index, sourcetype, recommended_fields \
    | where match=0 \
    | stats values(recommended_fields) as missing_rec_fields\
        by _time, modelName, index, sourcetype ] \
| eval rec_field_coverage_pct=round((match_count/recommended_field_count)*100, 2) \
| makemv missing_rec_fields \
| join modelName type=left \
    [| datamodel \
    | spath output=modelName modelName \
    | spath path=objects{}.constraints{} output=y \
    | search y=* \
    | mvexpand y \
    | spath input=y \
    | table y \
    | search y="*cim_*_indexes*" \
    | rex field=y "cim_(?<modelName>\w+)_indexes\`\)\s(?<constraint_srch>.*)\"," \
    | stats count by modelName constraint_srch \
    | table modelName constraint_srch ] \
| eval cim_search="index=".index." sourcetype=".sourcetype." ".constraint_srch \
| table _time modelName index sourcetype cim_search splunk_recommended_fields actual_mapped_fields missing_rec_fields rec_field_coverage_pct \
| sort -rec_field_coverage_pct modelName index sourcetype \
| eval ReportType="data_model_wrangler_mapping_quality_v1"\
| collect index=`data_model_wrangler_index`
